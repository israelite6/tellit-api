// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Permission {
  id         String @id @default(cuid())
  permission String

  RolePermission RolePermission[]
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  permissionId String
  roleId       String
  permission   Permission @relation(references: [id], fields: [permissionId])
  role         Role       @relation(references: [id], fields: [roleId], onDelete: Cascade)
  createdAt    DateTime?  @default(now()) @map("created_at")
  updatedAt    DateTime?  @map("updated_at")
  deletedAt    DateTime?  @map("deleted_at")

  @@map("role_permission")
}

model Role {
  id              String           @id @default(cuid())
  role            String
  RolePermissions RolePermission[]
  User            User[]
  createdAt       DateTime?        @default(now()) @map("created_at")
  updatedAt       DateTime?        @map("updated_at")
  deletedAt       DateTime?        @map("deleted_at")

  @@map("roles")
}

model User {
  id                            String    @id @default(cuid())
  email                         String    @unique
  firstName                     String    @map("first_name")
  lastName                      String    @map("last_name")
  middleName                    String?   @map("middle_name")
  username                      String    @unique
  address                       String?
  phoneNumber                   String    @unique @map("phone_number")
  password                      String
  gender                        Gender?
  city                          String?
  state                         String?
  country                       String?
  forgetPasswordToken           String?   @map("forget_password_token")
  forgetPasswordTokenExpiration DateTime? @map("forget_password_token_expiration")
  roleId                        String?   @map("role_id")
  role                          Role?     @relation(references: [id], fields: [roleId])
  createdAt                     DateTime? @default(now()) @map("created_at")
  updatedAt                     DateTime? @map("updated_at")
  deletedAt                     DateTime? @map("deleted_at")

  Topic            Topic[]
  Comment          TopicComment[]
  EducationHistory EducationHistory[]
  WorkExperience   WorkExperience[]
  @@map("users")
}

enum Gender {
  FEMALE
  MALE
}

model Forum {

  id          Int       @id @default(autoincrement())
  title       String    @unique
  description String?
  iconUrl     String?   @map("icon_url")
  bannarUrl   String?
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  Topic Topic[]
  @@map("forums")
}

model Topic {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  userId      String
  user        User      @relation(references: [id], fields: [userId])
  showOnFeed  Boolean?  @default(false) @map("show_on_feed")
  forumId     Int       @map("forum_id")
  forum       Forum     @relation(references: [id], fields: [forumId], onDelete: Cascade)
  views       Int?      @default(0)
  isVisible   Boolean?  @default(true)
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  Comment TopicComment[]
  @@map("topics")
}

model TopicComment {
  id             String    @id @default(cuid())
  userId         String    @map("user_id")
  user           User      @relation(references: [id], fields: [userId])
  topicId        Int       @map("topic_id")
  topic          Topic     @relation(references: [id], fields: [topicId], onDelete: Cascade)
  comment        String
  isAnonymous    Boolean?  @default(false) @map("is_anonymous")
  topicCommentId String?   @map("topic_comment_id")
  createdAt      DateTime? @default(now()) @map("created_at")
  updatedAt      DateTime? @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")

  @@map("topic_comments")
}

model EducationHistory {
  id         String    @id @default(cuid())
  userId     String    @map("user_id")
  user       User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  degree     String
  course     String
  startAt    DateTime  @map("start_at")
  endAt      DateTime? @map("end_at")
  schoolName String    @map("school_name")
  isCurrent  Boolean   @map("is_current")
  createdAt  DateTime? @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")

  @@map("education_histories")
}

model WorkExperience {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  user        User      @relation(references: [id], fields: [userId], onDelete: Cascade)
  title       String
  type        String
  startAt     DateTime  @map("start_at")
  endAt       DateTime? @map("end_at")
  companyName String    @map("company_name")
  location    String
  isCurrent   Boolean   @map("is_current")
  createdAt   DateTime? @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("work_experiences")
}
